/**
 * Shell Card Management APIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { boolean, lazy, object, optional, Schema, string } from '../schema';
import {
  DayTimeRestrictions,
  dayTimeRestrictionsSchema,
} from './dayTimeRestrictions';
import {
  LocationRestrictions,
  locationRestrictionsSchema,
} from './locationRestrictions';
import {
  ProductRestrictions,
  productRestrictionsSchema,
} from './productRestrictions';
import { UsageRestrictions, usageRestrictionsSchema } from './usageRestrictions';

export interface BundleRestriction {
  /**
   * True/False
   * A value indicates if the day/time restriction is to be reset for card bundle.
   * Optional
   * Default value is False.
   */
  resetDayTimeRestriction?: boolean;
  /**
   * True/False
   * A value indicates if the location restriction is to be reset for card bundle.
   * Optional
   * Default value is False.
   */
  resetLocationRestriction?: boolean;
  /**
   * True/False
   * A value indicates if the product restriction is to be reset for card bundle.
   * Optional
   * Default value is False.
   */
  resetProductRestriction?: boolean;
  usageRestrictions?: UsageRestrictions;
  /**
   * Day/time restrictions such as weekdays and time range to be applied on the bundle.
   * Mandatory if respective action is set as “Add”.
   * The details of DayTimeRestriction entity is given below.
   */
  dayTimeRestrictions?: DayTimeRestrictions;
  productRestriction?: ProductRestrictions;
  /**
   * Identifier of the location restriction profile to be updated for the bundle in Gateway.
   * Optional
   */
  locationRestrictionProfileId?: string;
  /**
   * Location restrictions to be applied on the bundle which either allows or restricts using the cards, which are under the bundle, in the specified locations.
   * Mandatory if respective action is set as “Add”.
   * Details of location restrictions are given below.
   */
  locationRestrictions?: LocationRestrictions;
}

export const bundleRestrictionSchema: Schema<BundleRestriction> = object({
  resetDayTimeRestriction: ['ResetDayTimeRestriction', optional(boolean())],
  resetLocationRestriction: ['ResetLocationRestriction', optional(boolean())],
  resetProductRestriction: ['ResetProductRestriction', optional(boolean())],
  usageRestrictions: [
    'UsageRestrictions',
    optional(lazy(() => usageRestrictionsSchema)),
  ],
  dayTimeRestrictions: [
    'DayTimeRestrictions',
    optional(lazy(() => dayTimeRestrictionsSchema)),
  ],
  productRestriction: [
    'ProductRestriction',
    optional(lazy(() => productRestrictionsSchema)),
  ],
  locationRestrictionProfileId: [
    'LocationRestrictionProfileId',
    optional(string()),
  ],
  locationRestrictions: [
    'LocationRestrictions',
    optional(lazy(() => locationRestrictionsSchema)),
  ],
});
