/**
 * Shell Card Management APIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { lazy, nullable, object, optional, Schema, string } from '../schema';
import {
  DayTimeRestriction,
  dayTimeRestrictionSchema,
} from './dayTimeRestriction';
import {
  LocationRestriction,
  locationRestrictionSchema,
} from './locationRestriction';
import {
  ProductRestrictionCard,
  productRestrictionCardSchema,
} from './productRestrictionCard';
import {
  UsageRestrictionsCard,
  usageRestrictionsCardSchema,
} from './usageRestrictionsCard';

export interface BundleRestriction {
  /**
   * The value indicates what actions to be performed with respect to day time restriction.
   * Mandatory
   * Allowed values –
   * •	Add: Apply the given restriction on the bundle.
   * •	Default: No Day/Time restriction will be applied on the bundle in Gateway.
   */
  dayTimeRestrictionAction?: string | null;
  /**
   * The value indicates what actions to be performed with respect to location restriction.
   * Mandatory
   * Allowed values –
   * •	Add: Apply the given restriction on the bundle.
   * •	Default: No location restriction will be applied on the bundle in Gateway.
   */
  locationRestrictionAction?: string | null;
  usageRestrictions?: UsageRestrictionsCard | null;
  /** Details of the day/time restrictions such as weekdays and time range in which transactions should be allowed on the card. */
  dayTimeRestrictions?: DayTimeRestriction;
  productRestrictions?: ProductRestrictionCard | null;
  locationRestrictions?: LocationRestriction;
}

export const bundleRestrictionSchema: Schema<BundleRestriction> = object({
  dayTimeRestrictionAction: [
    'DayTimeRestrictionAction',
    optional(nullable(string())),
  ],
  locationRestrictionAction: [
    'LocationRestrictionAction',
    optional(nullable(string())),
  ],
  usageRestrictions: [
    'UsageRestrictions',
    optional(nullable(lazy(() => usageRestrictionsCardSchema))),
  ],
  dayTimeRestrictions: [
    'DayTimeRestrictions',
    optional(lazy(() => dayTimeRestrictionSchema)),
  ],
  productRestrictions: [
    'ProductRestrictions',
    optional(nullable(lazy(() => productRestrictionCardSchema))),
  ],
  locationRestrictions: [
    'LocationRestrictions',
    optional(lazy(() => locationRestrictionSchema)),
  ],
});
