/**
 * Shell Card Management APIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ErrorObjectError } from '../errors/errorObjectError';
import {
  AccountRestrictionRequest,
  accountRestrictionRequestSchema,
} from '../models/accountRestrictionRequest';
import {
  AccountRestrictionResponse,
  accountRestrictionResponseSchema,
} from '../models/accountRestrictionResponse';
import {
  CreateBundleRequest,
  createBundleRequestSchema,
} from '../models/createBundleRequest';
import {
  CreateBundleResponse,
  createBundleResponseSchema,
} from '../models/createBundleResponse';
import {
  DeleteBundleRequest,
  deleteBundleRequestSchema,
} from '../models/deleteBundleRequest';
import {
  DeleteBundleResponse,
  deleteBundleResponseSchema,
} from '../models/deleteBundleResponse';
import {
  RestrictionCardRequest,
  restrictionCardRequestSchema,
} from '../models/restrictionCardRequest';
import {
  RestrictionCardResponse,
  restrictionCardResponseSchema,
} from '../models/restrictionCardResponse';
import {
  RestrictionSearchCardRequest,
  restrictionSearchCardRequestSchema,
} from '../models/restrictionSearchCardRequest';
import {
  RestrictionSearchCardResponse,
  restrictionSearchCardResponseSchema,
} from '../models/restrictionSearchCardResponse';
import {
  SearchAccountLimitRequest,
  searchAccountLimitRequestSchema,
} from '../models/searchAccountLimitRequest';
import {
  SearchAccountLimitResponse,
  searchAccountLimitResponseSchema,
} from '../models/searchAccountLimitResponse';
import {
  SummaryOfBundleRequest,
  summaryOfBundleRequestSchema,
} from '../models/summaryOfBundleRequest';
import {
  SummaryOfBundleResponse,
  summaryOfBundleResponseSchema,
} from '../models/summaryOfBundleResponse';
import {
  UpdateBundleRequest,
  updateBundleRequestSchema,
} from '../models/updateBundleRequest';
import {
  UpdateBundleResponse,
  updateBundleResponseSchema,
} from '../models/updateBundleResponse';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class RestrictionController extends BaseController {
  /**
   * This API enables clients to create a new card bundle and apply restrictions.
   *
   * #### Supported operations
   *
   * * Create bundle and include mandatory -
   *
   * * Usage, day/time, product and location restrictions
   *
   * * List of cards to add to bundle
   *
   * * Create bundle and include optional identifier of bundle in external system
   *
   * #### Validation rules
   *
   * The following are the key validation rules with the associated error codes for failed validation-
   *
   * * `7012` - At least one card must be added to the bundle
   *
   * *  `7011` - The total number of cards passed in the input must be 500 or less.
   *
   * *  `7014` - All the cards passed in the input are part of the selected account.
   *
   * *  `7013` - At least one restriction must be applied to the bundle i.e. either of usage, day/time,
   * location or product restriction.
   *
   * *  `7005` - Day time restriction cannot be set to restrict the use of a card on all days of the
   * week.
   *
   * *  `7000` - Usage restriction of the bundle is not open ended i.e. all the limits within the usage
   * restriction must not be set to 0/null.
   *
   * *  `7004` - In the usage restrictions, the limits per transaction should be less than or equal to
   * Daily, Daily should be less than or equal to Weekly, Weekly should be less than or equal to Monthly.
   * Exception being 0/blank will be skipped, i.e. Daily value should be less than equal to Monthly value
   * if Weekly value is 0/blank.
   *
   * *  `0007` - Error returned if request parameters fail validation e.g. mandatory check.
   *
   * @param requestId    Mandatory UUID (according to RFC 4122 standards) for requests
   *                                                   and responses. This will be played back in the response from the
   *                                                   request.
   * @param body         Create Bundle Request body
   * @return Response from the API call
   */
  async restrictionBundleCreate(
    requestId: string,
    body?: CreateBundleRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CreateBundleResponse>> {
    const req = this.createRequest(
      'POST',
      '/card-restrictions/v1/bundles/create'
    );
    const mapped = req.prepareArgs({
      requestId: [requestId, string()],
      body: [body, optional(createBundleRequestSchema)],
    });
    req.header('RequestId', mapped.requestId);
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ErrorObjectError, 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).\n');
    req.throwOn(401, ErrorObjectError, 'The request has not been applied because it lacks valid  authentication credentials for the target resource.\n');
    req.throwOn(403, ErrorObjectError, 'Forbidden');
    req.throwOn(404, ErrorObjectError, 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.\n');
    req.throwOn(500, ErrorObjectError, 'The server encountered an unexpected condition that  prevented it from fulfilling the request.\n');
    req.authenticate([{ bearerToken: true }]);
    return req.callAsJson(createBundleResponseSchema, requestOptions);
  }

  /**
   * This API enables clients to update an existing card bundle and its associated restrictions.
   *
   * #### Supported operations
   *
   * * Add new cards to an existing bundle
   *
   * * Remove cards from existing bundle
   *
   * * Update restrictions applied to existing bundle
   *
   *
   *
   * The following are the key validation rules with the associated error codes for failed validation-
   *
   *
   * #### Validation rules
   *
   * *  `9007` - The cards must exist in the cards platform for adding or removing cards.
   *
   * *  `7014` - All the cards passed in the input are part of the selected account.
   *
   * *  `7018` - All the cards passed in the input are part of the selected bundle.
   *
   * *  `7011` - The total number of cards passed in the input must be 500 or less.
   *
   * *  `7012` - The action to remove cards should not result in removing all the cards from the bundle.
   *
   * *  `7016` - At least one restriction must be modified for â€œUpdateâ€ request action.
   *
   * *  `7013` - All restrictions cannot be marked for â€œResetâ€ for â€œUpdateâ€ request action.
   *
   * *  `7005` - Day time restriction cannot be set to restrict the use of a card on all days of the
   * week. This validation is applicable for Update request action.
   *
   * *  `7000` - Usage restriction of the bundle is not open ended i.e., all the limits within the
   * usage restriction must not be set to 0/null. This validation is applicable for Update request action.
   *
   * *  `7004` - In the usage restrictions, the limits per transaction should be less than or equal to
   * Daily, Daily should be less than or equal to Weekly, Weekly should be less than or equal to Monthly.
   * Exception being 0/blank will be skipped, i.e., Daily value should be less than equal to Monthly
   * value if Weekly value is 0/blank. This validation is applicable for Update request action.
   *
   * *  `0007` - Error returned if request parameters fail validation e.g. at least one card must be
   * provided in the input.
   *
   * @param requestId    Mandatory UUID (according to RFC 4122 standards) for requests
   *                                                   and responses. This will be played back in the response from the
   *                                                   request.
   * @param body         Update Bundle Request body
   * @return Response from the API call
   */
  async restrictionBundleUpdate(
    requestId: string,
    body?: UpdateBundleRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UpdateBundleResponse>> {
    const req = this.createRequest(
      'POST',
      '/card-restrictions/v1/bundles/update'
    );
    const mapped = req.prepareArgs({
      requestId: [requestId, string()],
      body: [body, optional(updateBundleRequestSchema)],
    });
    req.header('RequestId', mapped.requestId);
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ErrorObjectError, 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).\n');
    req.throwOn(401, ErrorObjectError, 'The request has not been applied because it lacks valid  authentication credentials for the target resource.\n');
    req.throwOn(403, ErrorObjectError, 'Forbidden');
    req.throwOn(404, ErrorObjectError, 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.\n');
    req.throwOn(500, ErrorObjectError, 'The server encountered an unexpected condition that  prevented it from fulfilling the request.\n');
    req.authenticate([{ bearerToken: true }]);
    return req.callAsJson(updateBundleResponseSchema, requestOptions);
  }

  /**
   * This API enables clients to delete an existing card bundle in the Shell Card Platform. Once the card
   * bundle is deleted the usage and product restrictions of the cards that were present in the bundle
   * will be reset based on the request.
   *
   * #### Supported operations
   *
   * * Delete card bundle by bundle Id
   *
   * #### Validation rules
   *
   * The following are the key validation rules with the associated error codes for failed validation-
   *
   * *  `7019` - The given card bundle is not available in the Shell Card Platform.
   *
   * *  `0007` - Error returned if request parameters fail validation e.g. mandatory check.
   *
   * @param requestId    Mandatory UUID (according to RFC 4122 standards) for requests
   *                                                   and responses. This will be played back in the response from the
   *                                                   request.
   * @param body         Delete Bundle Request body
   * @return Response from the API call
   */
  async restrictionBundleDelete(
    requestId: string,
    body?: DeleteBundleRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DeleteBundleResponse>> {
    const req = this.createRequest(
      'POST',
      '/card-restrictions/v1/bundles/delete'
    );
    const mapped = req.prepareArgs({
      requestId: [requestId, string()],
      body: [body, optional(deleteBundleRequestSchema)],
    });
    req.header('RequestId', mapped.requestId);
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ErrorObjectError, 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).\n');
    req.throwOn(401, ErrorObjectError, 'The request has not been applied because it lacks valid  authentication credentials for the target resource.\n');
    req.throwOn(403, ErrorObjectError, 'Forbidden');
    req.throwOn(404, ErrorObjectError, 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.\n');
    req.throwOn(500, ErrorObjectError, 'The server encountered an unexpected condition that  prevented it from fulfilling the request.\n');
    req.authenticate([{ bearerToken: true }]);
    return req.callAsJson(deleteBundleResponseSchema, requestOptions);
  }

  /**
   * This API allows clients to get a summary of card bundles associated with Payer/Account. This API
   * will return the basic bundle details including card and restriction details. Optionally the API will
   * also include a count of cards that are not associated with the bundle but returned by the search
   * criteria.
   *
   *
   *
   * Note - to include count of cards of an account that are not associated with any bundles, in the
   * input parameter SearchCardBundles either pass all the bundles of the account in the list or pass
   * only account with bundle id left blank/null.
   *
   *
   *
   * #### Supported operations
   *
   * * Get summary of bundles by list of bundle Ids
   *
   * @param requestId    Mandatory UUID (according to RFC 4122 standards) for
   *                                                      requests and responses. This will be played back in the
   *                                                      response from the request.
   * @param body         Summary Bundle Request body
   * @return Response from the API call
   */
  async restrictionBundleSummary(
    requestId: string,
    body?: SummaryOfBundleRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SummaryOfBundleResponse>> {
    const req = this.createRequest(
      'POST',
      '/card-restrictions/v1/bundles/Summary'
    );
    const mapped = req.prepareArgs({
      requestId: [requestId, string()],
      body: [body, optional(summaryOfBundleRequestSchema)],
    });
    req.header('RequestId', mapped.requestId);
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ErrorObjectError, 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).\n');
    req.throwOn(401, ErrorObjectError, 'The request has not been applied because it lacks valid  authentication credentials for the target resource.\n');
    req.throwOn(403, ErrorObjectError, 'Forbidden');
    req.throwOn(404, ErrorObjectError, 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.\n');
    req.throwOn(500, ErrorObjectError, 'The server encountered an unexpected condition that  prevented it from fulfilling the request.\n');
    req.authenticate([{ bearerToken: true }]);
    return req.callAsJson(summaryOfBundleResponseSchema, requestOptions);
  }

  /**
   * This API allows to set or update the restrictions for existing cards or newly ordered cards under
   * the same payer.
   *
   *
   *
   * #### Supported operations
   *
   * * Set or reset usage restrictions for cards
   *
   * * Set or reset day/time restrictions for cards
   *
   * * Set or reset product restrictions for cards
   *
   * * Set or reset location restrictions for cards
   *
   * @param requestId    Mandatory UUID (according to RFC 4122 standards) for
   *                                                      requests and responses. This will be played back in the
   *                                                      response from the request.
   * @param body         Summary Bundle Request body
   * @return Response from the API call
   */
  async cardRestriction(
    requestId: string,
    body?: RestrictionCardRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<RestrictionCardResponse>> {
    const req = this.createRequest('POST', '/card-restrictions/v2/card');
    const mapped = req.prepareArgs({
      requestId: [requestId, string()],
      body: [body, optional(restrictionCardRequestSchema)],
    });
    req.header('RequestId', mapped.requestId);
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ErrorObjectError, 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).\n');
    req.throwOn(401, ErrorObjectError, 'The request has not been applied because it lacks valid  authentication credentials for the target resource.\n');
    req.throwOn(403, ErrorObjectError, 'Forbidden');
    req.throwOn(404, ErrorObjectError, 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.\n');
    req.throwOn(500, ErrorObjectError, 'The server encountered an unexpected condition that  prevented it from fulfilling the request.\n');
    req.authenticate([{ bearerToken: true }]);
    return req.callAsJson(restrictionCardResponseSchema, requestOptions);
  }

  /**
   * This operation allows setting or updating the usage restrictions of an existing account.
   *
   *
   *
   * #### Validation rules
   *
   *
   *
   * *	The account exists.
   *
   * *	Day time restriction cannot be set to restrict the use of a card, under the account, on all days
   * of the week.
   *
   * *	Either of the usage, daytime or location is either marked for reset or new restriction values
   * provided for the account.
   *
   * *	In usage restrictions, the limits per transaction should be less than or equal to Daily, Daily
   * should be less than or equal to Weekly, Weekly should be less than or equal to Monthly. Exception
   * being 0/blank will be skipped, i.e., Daily value should be less than equal to Monthly value if
   * Weekly value is 0/blank.
   *
   *
   *
   * @param requestId    Mandatory UUID (according to RFC 4122 standards) for
   *                                                         requests and responses. This will be played back in the
   *                                                         response from the request.
   * @param body         Summary Bundle Request body
   * @return Response from the API call
   */
  async accountRestriction(
    requestId: string,
    body?: AccountRestrictionRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AccountRestrictionResponse>> {
    const req = this.createRequest('POST', '/card-restrictions/v1/Account');
    const mapped = req.prepareArgs({
      requestId: [requestId, string()],
      body: [body, optional(accountRestrictionRequestSchema)],
    });
    req.header('RequestId', mapped.requestId);
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ErrorObjectError, 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).\n');
    req.throwOn(401, ErrorObjectError, 'The request has not been applied because it lacks valid  authentication credentials for the target resource.\n');
    req.throwOn(403, ErrorObjectError, 'Forbidden');
    req.throwOn(404, ErrorObjectError, 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.\n');
    req.throwOn(500, ErrorObjectError, 'The server encountered an unexpected condition that  prevented it from fulfilling the request.\n');
    req.authenticate([{ bearerToken: true }]);
    return req.callAsJson(accountRestrictionResponseSchema, requestOptions);
  }

  /**
   * This operation will allow user to get account level limits for the given account.
   *
   * It returns the velocity limits if its overridden at the account else the values will be null/empty.
   *
   * @param requestId    Mandatory UUID (according to RFC 4122 standards) for
   *                                                         requests and responses. This will be played back in the
   *                                                         response from the request.
   * @param body         Summary Bundle Request body
   * @return Response from the API call
   */
  async searchAccountLimit(
    requestId: string,
    body?: SearchAccountLimitRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SearchAccountLimitResponse>> {
    const req = this.createRequest(
      'POST',
      '/card-restrictions/v1/searchaccountlimit'
    );
    const mapped = req.prepareArgs({
      requestId: [requestId, string()],
      body: [body, optional(searchAccountLimitRequestSchema)],
    });
    req.header('RequestId', mapped.requestId);
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ErrorObjectError, 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).\n');
    req.throwOn(401, ErrorObjectError, 'The request has not been applied because it lacks valid  authentication credentials for the target resource.\n');
    req.throwOn(403, ErrorObjectError, 'Forbidden');
    req.throwOn(404, ErrorObjectError, 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.\n');
    req.throwOn(500, ErrorObjectError, 'The server encountered an unexpected condition that  prevented it from fulfilling the request.\n');
    req.authenticate([{ bearerToken: true }]);
    return req.callAsJson(searchAccountLimitResponseSchema, requestOptions);
  }

  /**
   * This API will allows querying card details including the day/time and product restrictions.
   *
   * #### Supported operations
   *
   * * Search by list of cards or bundle
   *
   * * Include card bundle details (optional)
   *
   *
   * @param requestId    Mandatory UUID (according to RFC 4122 standards) for
   *                                                            requests and responses. This will be played back in the
   *                                                            response from the request.
   * @param body         Summary Bundle Request body
   * @return Response from the API call
   */
  async searchCardRestriction(
    requestId: string,
    body?: RestrictionSearchCardRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<RestrictionSearchCardResponse>> {
    const req = this.createRequest('POST', '/card-restrictions/v2/search');
    const mapped = req.prepareArgs({
      requestId: [requestId, string()],
      body: [body, optional(restrictionSearchCardRequestSchema)],
    });
    req.header('RequestId', mapped.requestId);
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ErrorObjectError, 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).\n');
    req.throwOn(401, ErrorObjectError, 'The request has not been applied because it lacks valid  authentication credentials for the target resource.\n');
    req.throwOn(403, ErrorObjectError, 'Forbidden');
    req.throwOn(404, ErrorObjectError, 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.\n');
    req.throwOn(500, ErrorObjectError, 'The server encountered an unexpected condition that  prevented it from fulfilling the request.\n');
    req.authenticate([{ bearerToken: true }]);
    return req.callAsJson(restrictionSearchCardResponseSchema, requestOptions);
  }
}
